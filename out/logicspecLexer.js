"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _antlr = _interopRequireDefault(require("antlr4"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786", "\u5964\x02\x1B\xBD\b\x01\x04\x02\t\x02\x04\x03\t\x03", "\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07", "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04", "\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06", "\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07", "\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03", "\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03", "\n\x03\x0B\x03\x0B\x05\x0B[\n\x0B\x03\f\x03\f\x03", "\f\x03\r\x03\r\x03\r\x03\r\x03\r\x05\re\n\r\x07\rg\n\r", "\f\r\x0E\rj\x0B\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F", "\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0Ft\n\x0F", "\x07\x0Fv\n\x0F\f\x0F\x0E\x0Fy\x0B\x0F\x03\x10\x06", "\x10|\n\x10\r\x10\x0E\x10}\x03\x11\x03\x11\x03\x12", "\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13", "\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13", "\x05\x13\x8F\n\x13\x03\x14\x03\x14\x03\x14\x03", "\x14\x03\x14\x05\x14\x96\n\x14\x03\x15\x03\x15", "\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15", "\x05\x15\xA0\n\x15\x03\x16\x03\x16\x03\x17\x03", "\x17\x03\x18\x07\x18\xA7\n\x18\f\x18\x0E\x18\xAA", "\x0B\x18\x03\x18\x03\x18\x03\x19\x06\x19\xAF\n", "\x19\r\x19\x0E\x19\xB0\x03\x19\x03\x19\x03\x1A", "\x03\x1A\x07\x1A\xB7\n\x1A\f\x1A\x0E\x1A\xBA\x0B", "\x1A\x03\x1A\x03\x1A\x02\x02\x1B\x03\x03\x05\x04", "\x07\x05\t\x06\x0B\x07\r\b\x0F\t\x11\n\x13\x0B\x15", "\f\x17\r\x19\x0E\x1B\x0F\x1D\x10\x1F\x11!\x12#\x13", "%\x14'\x15)\x16+\x17-\x18/\x191\x1A3\x1B\x03\x02", "\f\x06\x02\f\f\x0F\x0F$$^^\x06\x02\f\f\x0F\x0F))^^\x03", "\x022;\x04\x02>>@@\x04\x02--//\x05\x02,,11``\x05\x02", "C\\aac|\x04\x02C\\c|\f\x02\x0B\x0F\"\"\x87\x87\xA2\xA2", "\u1682\u1682\u2002\u200C\u202A\u202B\u2031\u2031\u2061\u2061\u3002\u3002", "\x04\x02\f\f\x0F\x0F\x02\xCD\x02\x03\x03\x02\x02", "\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02", "\x02\x02\t\x03\x02\x02\x02\x02\x0B\x03\x02\x02", "\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02", "\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02", "\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02", "\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02", "\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02", "\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02", "\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02", ")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03", "\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02", "\x02\x02\x023\x03\x02\x02\x02\x035\x03\x02\x02", "\x02\x057\x03\x02\x02\x02\x079\x03\x02\x02\x02", "\t=\x03\x02\x02\x02\x0B?\x03\x02\x02\x02\rA\x03", "\x02\x02\x02\x0FI\x03\x02\x02\x02\x11M\x03\x02", "\x02\x02\x13Q\x03\x02\x02\x02\x15Z\x03\x02\x02", "\x02\x17\\\x03\x02\x02\x02\x19_\x03\x02\x02\x02", "\x1Bk\x03\x02\x02\x02\x1Dn\x03\x02\x02\x02\x1F", "{\x03\x02\x02\x02!\x7F\x03\x02\x02\x02#\x81\x03", "\x02\x02\x02%\x8E\x03\x02\x02\x02'\x95\x03\x02", "\x02\x02)\x9F\x03\x02\x02\x02+\xA1\x03\x02\x02", "\x02-\xA3\x03\x02\x02\x02/\xA8\x03\x02\x02\x02", "1\xAE\x03\x02\x02\x023\xB4\x03\x02\x02\x0256\x07", "*\x02\x026\x04\x03\x02\x02\x0278\x07+\x02\x028\x06", "\x03\x02\x02\x029:\x07?\x02\x02:;\x07?\x02\x02;", "<\x07?\x02\x02<\b\x03\x02\x02\x02=>\x07.\x02\x02", ">\n\x03\x02\x02\x02?@\x07a\x02\x02@\f\x03\x02\x02", "\x02AB\x07k\x02\x02BC\x07o\x02\x02CD\x07r\x02\x02", "DE\x07n\x02\x02EF\x07k\x02\x02FG\x07g\x02\x02GH\x07", "u\x02\x02H\x0E\x03\x02\x02\x02IJ\x07h\x02\x02JK", "\x07q\x02\x02KL\x07t\x02\x02L\x10\x03\x02\x02\x02", "MN\x07c\x02\x02NO\x07n\x02\x02OP\x07n\x02\x02P\x12", "\x03\x02\x02\x02QR\x07g\x02\x02RS\x07z\x02\x02S", "T\x07k\x02\x02TU\x07u\x02\x02UV\x07v\x02\x02VW\x07", "u\x02\x02W\x14\x03\x02\x02\x02X[\x05\x17\f\x02Y", "[\x05\x1B\x0E\x02ZX\x03\x02\x02\x02ZY\x03\x02\x02", "\x02[\x16\x03\x02\x02\x02\\]\x05\x19\r\x02]^\x07", "$\x02\x02^\x18\x03\x02\x02\x02_h\x07$\x02\x02`g", "\n\x02\x02\x02ad\x07^\x02\x02be\x0B\x02\x02\x02", "ce\x07\x02\x02\x03db\x03\x02\x02\x02dc\x03\x02\x02", "\x02eg\x03\x02\x02\x02f`\x03\x02\x02\x02fa\x03\x02", "\x02\x02gj\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03", "\x02\x02\x02i\x1A\x03\x02\x02\x02jh\x03\x02\x02", "\x02kl\x05\x1D\x0F\x02lm\x07)\x02\x02m\x1C\x03\x02", "\x02\x02nw\x07)\x02\x02ov\n\x03\x02\x02ps\x07^\x02", "\x02qt\x0B\x02\x02\x02rt\x07\x02\x02\x03sq\x03\x02", "\x02\x02sr\x03\x02\x02\x02tv\x03\x02\x02\x02uo\x03", "\x02\x02\x02up\x03\x02\x02\x02vy\x03\x02\x02\x02", "wu\x03\x02\x02\x02wx\x03\x02\x02\x02x\x1E\x03\x02", "\x02\x02yw\x03\x02\x02\x02z|\x05!\x11\x02{z\x03", "\x02\x02\x02|}\x03\x02\x02\x02}{\x03\x02\x02\x02", "}~\x03\x02\x02\x02~ \x03\x02\x02\x02\x7F\x80\t\x04", "\x02\x02\x80\"\x03\x02\x02\x02\x81\x82\x07p\x02", "\x02\x82\x83\x07q\x02\x02\x83\x84\x07v\x02\x02", "\x84$\x03\x02\x02\x02\x85\x86\x07v\x02\x02\x86", "\x87\x07t\x02\x02\x87\x88\x07w\x02\x02\x88\x8F", "\x07g\x02\x02\x89\x8A\x07h\x02\x02\x8A\x8B\x07", "c\x02\x02\x8B\x8C\x07n\x02\x02\x8C\x8D\x07u\x02", "\x02\x8D\x8F\x07g\x02\x02\x8E\x85\x03\x02\x02", "\x02\x8E\x89\x03\x02\x02\x02\x8F&\x03\x02\x02", "\x02\x90\x91\x07c\x02\x02\x91\x92\x07p\x02\x02", "\x92\x96\x07f\x02\x02\x93\x94\x07q\x02\x02\x94", "\x96\x07t\x02\x02\x95\x90\x03\x02\x02\x02\x95", "\x93\x03\x02\x02\x02\x96(\x03\x02\x02\x02\x97", "\xA0\x07?\x02\x02\x98\x99\x07#\x02\x02\x99\xA0", "\x07?\x02\x02\x9A\x9B\x07>\x02\x02\x9B\xA0\x07", "?\x02\x02\x9C\x9D\x07@\x02\x02\x9D\xA0\x07?\x02", "\x02\x9E\xA0\t\x05\x02\x02\x9F\x97\x03\x02\x02", "\x02\x9F\x98\x03\x02\x02\x02\x9F\x9A\x03\x02\x02", "\x02\x9F\x9C\x03\x02\x02\x02\x9F\x9E\x03\x02\x02", "\x02\xA0*\x03\x02\x02\x02\xA1\xA2\t\x06\x02\x02", "\xA2,\x03\x02\x02\x02\xA3\xA4\t\x07\x02\x02\xA4", ".\x03\x02\x02\x02\xA5\xA7\t\b\x02\x02\xA6\xA5\x03", "\x02\x02\x02\xA7\xAA\x03\x02\x02\x02\xA8\xA6\x03", "\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAB\x03", "\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAB\xAC\t", "\t\x02\x02\xAC0\x03\x02\x02\x02\xAD\xAF\t\n\x02", "\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02", "\x02\xB0\xAE\x03\x02\x02\x02\xB0\xB1\x03\x02\x02", "\x02\xB1\xB2\x03\x02\x02\x02\xB2\xB3\b\x19\x02", "\x02\xB32\x03\x02\x02\x02\xB4\xB8\x07%\x02\x02", "\xB5\xB7\n\x0B\x02\x02\xB6\xB5\x03\x02\x02\x02", "\xB7\xBA\x03\x02\x02\x02\xB8\xB6\x03\x02\x02\x02", "\xB8\xB9\x03\x02\x02\x02\xB9\xBB\x03\x02\x02\x02", "\xBA\xB8\x03\x02\x02\x02\xBB\xBC\b\x1A\x02\x02", "\xBC4\x03\x02\x02\x02\x11\x02Zdfhsuw}\x8E\x95\x9F", "\xA8\xB0\xB8\x03\b\x02\x02"].join("");
var atn = new _antlr["default"].atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new _antlr["default"].dfa.DFA(ds, index);
});

var logicspecLexer = /*#__PURE__*/function (_antlr4$Lexer) {
  _inherits(logicspecLexer, _antlr4$Lexer);

  var _super = _createSuper(logicspecLexer);

  function logicspecLexer(input) {
    var _this;

    _classCallCheck(this, logicspecLexer);

    _this = _super.call(this, input);
    _this._interp = new _antlr["default"].atn.LexerATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, new _antlr["default"].PredictionContextCache());
    return _this;
  }

  _createClass(logicspecLexer, [{
    key: "atn",
    get: function get() {
      return atn;
    }
  }]);

  return logicspecLexer;
}(_antlr["default"].Lexer);

exports["default"] = logicspecLexer;

_defineProperty(logicspecLexer, "grammarFileName", "logicspec.g4");

_defineProperty(logicspecLexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);

_defineProperty(logicspecLexer, "modeNames", ["DEFAULT_MODE"]);

_defineProperty(logicspecLexer, "literalNames", [null, "'('", "')'", "'==='", "','", "'_'", "'implies'", "'for'", "'all'", "'exists'", null, null, null, null, null, null, null, "'not'"]);

_defineProperty(logicspecLexer, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, "STRING_LITERAL", "DOUBLE_QUOTED_STRING_LITERAL", "UNTERMINATED_DOUBLE_QUOTED_STRING_LITERAL", "SINGLE_QUOTED_STRING_LITERAL", "UNTERMINATED_SINGLE_QUOTED_STRING_LITERAL", "INT", "DIGIT", "UNARY_LOGICAL_OPERATOR", "LOGICAL_CONSTANT", "LOGICAL_OPERATOR", "RELATIONAL_OPERATOR", "UNARY_BINARY_ARITHMETIC_OPERATOR", "ARITHMETIC_OPERATOR", "IDENTIFIER", "WS", "LINE_COMMENT"]);

_defineProperty(logicspecLexer, "ruleNames", ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "STRING_LITERAL", "DOUBLE_QUOTED_STRING_LITERAL", "UNTERMINATED_DOUBLE_QUOTED_STRING_LITERAL", "SINGLE_QUOTED_STRING_LITERAL", "UNTERMINATED_SINGLE_QUOTED_STRING_LITERAL", "INT", "DIGIT", "UNARY_LOGICAL_OPERATOR", "LOGICAL_CONSTANT", "LOGICAL_OPERATOR", "RELATIONAL_OPERATOR", "UNARY_BINARY_ARITHMETIC_OPERATOR", "ARITHMETIC_OPERATOR", "IDENTIFIER", "WS", "LINE_COMMENT"]);

logicspecLexer.EOF = _antlr["default"].Token.EOF;
logicspecLexer.T__0 = 1;
logicspecLexer.T__1 = 2;
logicspecLexer.T__2 = 3;
logicspecLexer.T__3 = 4;
logicspecLexer.T__4 = 5;
logicspecLexer.T__5 = 6;
logicspecLexer.T__6 = 7;
logicspecLexer.T__7 = 8;
logicspecLexer.T__8 = 9;
logicspecLexer.STRING_LITERAL = 10;
logicspecLexer.DOUBLE_QUOTED_STRING_LITERAL = 11;
logicspecLexer.UNTERMINATED_DOUBLE_QUOTED_STRING_LITERAL = 12;
logicspecLexer.SINGLE_QUOTED_STRING_LITERAL = 13;
logicspecLexer.UNTERMINATED_SINGLE_QUOTED_STRING_LITERAL = 14;
logicspecLexer.INT = 15;
logicspecLexer.DIGIT = 16;
logicspecLexer.UNARY_LOGICAL_OPERATOR = 17;
logicspecLexer.LOGICAL_CONSTANT = 18;
logicspecLexer.LOGICAL_OPERATOR = 19;
logicspecLexer.RELATIONAL_OPERATOR = 20;
logicspecLexer.UNARY_BINARY_ARITHMETIC_OPERATOR = 21;
logicspecLexer.ARITHMETIC_OPERATOR = 22;
logicspecLexer.IDENTIFIER = 23;
logicspecLexer.WS = 24;
logicspecLexer.LINE_COMMENT = 25;
module.exports = exports.default;